package com.glassait.androidproject.view.main;

import android.content.Context;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;

import androidx.fragment.app.Fragment;
import androidx.navigation.NavController;
import androidx.navigation.fragment.NavHostFragment;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.glassait.androidproject.R;
import com.glassait.androidproject.common.utils.secret.Secret;
import com.glassait.androidproject.common.utils.secret.StoreLocalData;
import com.glassait.androidproject.model.dao.OfferDao;
import com.glassait.androidproject.model.database.AppDatabase;
import com.glassait.androidproject.model.database.Builder;
import com.glassait.androidproject.model.entity.Offer;
import com.glassait.androidproject.model.entity.User;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

/**
 * A fragment representing a list of Items.
 * <p>
 * Code generated by Android Studio
 */
public class SeeAllOfferFragment extends Fragment {
    // Database part
    private static final AppDatabase mAppDatabase     = Builder.getInstance()
                                                               .getAppDatabase();
    private static final OfferDao    mOfferDao        = mAppDatabase.offerDao();
    // List part
    private static final String      ARG_COLUMN_COUNT = "column-count";
    private              int         mColumnCount     = 1;

    /**
     * Mandatory empty constructor for the fragment manager to instantiate the
     * fragment (e.g. upon screen orientation changes).
     */
    public SeeAllOfferFragment() {}

    @SuppressWarnings("unused")
    public static SeeAllOfferFragment newInstance(int columnCount) {
        SeeAllOfferFragment fragment = new SeeAllOfferFragment();
        Bundle              args     = new Bundle();
        args.putInt(
                ARG_COLUMN_COUNT,
                columnCount
        );
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (getArguments() != null) {
            mColumnCount = getArguments().getInt(ARG_COLUMN_COUNT);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View root = inflater.inflate(
                R.layout.fragment_see_all_offer_list,
                container,
                false
        );

        NavController navController = NavHostFragment.findNavController(this);
        RecyclerView  recyclerView  = root.findViewById(R.id.see_all_my_offer_list);

        // Set the adapter
        Context context = root.getContext();

        if (mColumnCount <= 1) {
            recyclerView.setLayoutManager(new LinearLayoutManager(context));
        } else {
            recyclerView.setLayoutManager(new GridLayoutManager(
                    context,
                    mColumnCount
            ));
        }

        AtomicReference<List<Offer>> offerList = new AtomicReference<>();
        offerList.set(new ArrayList<>());
        SeeAllOfferRecyclerViewAdapter adapter =
                new SeeAllOfferRecyclerViewAdapter(offerList.get());

        String from = StoreLocalData.getInstance()
                                    .getSeeAll();
        User currentUser = StoreLocalData.getInstance()
                                         .getUser();

        EditText searchEt = root.findViewById(R.id.see_all_offer_search_et);

        switch (from) {
            case "yourOffer":
                offerList.set(mOfferDao.getAllOffersFromCreatorId(currentUser.uid));
                SecondActivity.getInstance()
                              .enableAddButton(v -> navController.navigate(R.id.create_offer_fragment));
                break;
            case "inArea":
                List<Offer> firstList =
                        mOfferDao.getAllOffersNotReservedAndNotFromCreatorId(currentUser.uid);
                List<Offer> displayedList = new ArrayList<>();

                for (Offer offer : firstList) {
                    if (currentUser.address.getLocation()
                                           .distanceTo(offer.location) <= Secret.DISTANCE) {
                        displayedList.add(offer);
                    }
                }
                offerList.set(displayedList);
                break;
            case "myReservation":
                offerList.set(mOfferDao.getAllOffersReservedBy(currentUser.uid));
                break;
            case "search":
                offerList.set(mOfferDao.getAllOffersNotReservedAndNotFromCreatorId(currentUser.uid));
                searchEt.setVisibility(View.VISIBLE);

                searchEt.setOnKeyListener((v, keyCode, event) -> {
                    if (event.getAction() == KeyEvent.ACTION_UP && keyCode == 66) {
                        adapter.clearList();

                        String search = searchEt.getText()
                                                .toString()
                                                .trim()
                                                .toLowerCase();
                        searchEt.setText(search);

                        List<Offer> newList = new ArrayList<>();
                        List<Offer> offers =
                                mOfferDao.getAllOffersNotReservedAndNotFromCreatorId(currentUser.uid);

                        if (search.length() == 0) {
                            newList = offers;
                        } else {
                            for (Offer offer : offers) {
                                if (offer.title.toLowerCase()
                                               .contains(search)) {
                                    newList.add(offer);
                                } else if (offer.title.toLowerCase()
                                                      .equals(search)) {
                                    newList.add(offer);
                                }
                            }
                        }

                        adapter.setList(newList);
                        adapter.notifyDataSetChanged();
                    }
                    return false;
                });
                break;
        }

        adapter.setList(offerList.get());
        adapter.notifyDataSetChanged();
        adapter.setOnClickListener(offer -> {
            StoreLocalData.getInstance()
                          .setOffer(offer);
            navController.navigate(R.id.offer_fragment);
        });
        recyclerView.setAdapter(adapter);

        return root;
    }

    @Override
    public void onStop() {
        super.onStop();
        SecondActivity.getInstance()
                      .disableAddButton();
    }
}